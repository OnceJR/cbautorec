import subprocess
import time
import os
import logging
import glob
from telethon import TelegramClient, events, Button
import asyncio
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from urllib.parse import urlparse
import json

# Configuraci√≥n de la API
API_ID = 24738183
API_HASH = '6a1c48cfe81b1fc932a02c4cc1d312bf'
BOT_TOKEN = "7882998171:AAGF6p9RYqMlKuEw8Ssyk2ZTsBcD59Ree-c"

bot = TelegramClient('my_bot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# Configurar logs
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Inicializa el navegador
chrome_options = Options()
chrome_options.add_argument("--no-sandbox")  # Evita el sandbox cuando se ejecuta como root
chrome_options.add_argument("--headless")  # Ejecuta sin interfaz gr√°fica
chrome_options.add_argument("--disable-dev-shm-usage")  # Usa /tmp en lugar de /dev/shm para memoria compartida
chrome_options.add_argument("--remote-debugging-port=9222")  # Habilita un puerto para depuraci√≥n remota

driver = webdriver.Chrome(service=Service("/usr/bin/chromedriver"), options=chrome_options)

LINKS_FILE = 'links.json'
DOWNLOAD_PATH = "/root/cbautorec/"
GDRIVE_PATH = "gdrive:/182Bi69ovEbkvZAlcIYYf-pV1UCeEzjXH/"

AUTHORIZED_USERS = {1170684259, 1218594540}
is_recording = {}  # Diccionario para almacenar el estado de grabaci√≥n por usuario

# Diccionario para almacenar informaci√≥n de grabaci√≥n por modelo
grabaciones = {}

# Cargar y guardar enlaces
def load_links():
    """Carga los enlaces desde un archivo JSON."""
    if os.path.exists(LINKS_FILE):
        with open(LINKS_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_links(links):
    """Guarda los enlaces en un archivo JSON."""
    with open(LINKS_FILE, 'w') as f:
        json.dump(links, f)

def add_link(user_id, link):
    """Agrega un enlace a la lista de un usuario."""
    links = load_links()
    user_id_str = str(user_id)
    if user_id_str not in links:
        links[user_id_str] = []
    if link not in links[user_id_str]:
        links[user_id_str].append(link)
        save_links(links)

def remove_link(user_id, link):
    """Elimina un enlace de la lista de un usuario."""
    links = load_links()
    user_id_str = str(user_id)
    if user_id_str in links and link in links[user_id_str]:
        links[user_id_str].remove(link)
        save_links(links)

def delete_link(link):
    """Elimina un enlace de la lista de enlaces global."""
    links = load_links()  # Cargar enlaces una sola vez
    # Recorre todos los usuarios para eliminar el enlace
    for user_links in links.values():
        if link in user_links:
            user_links.remove(link)
            save_links(links)  # Guardar los enlaces actualizados
            logging.info(f"Enlace eliminado: {link}")
            return f"Enlace eliminado: {link}"
    logging.warning(f"El enlace no existe: {link}")
    return "El enlace no existe."

# Validaci√≥n de URL
def is_valid_url(url):
    """Valida si una URL es v√°lida."""
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except ValueError:
        return False

# Extracci√≥n de enlace m3u8
def extract_last_m3u8_link(chaturbate_link):
    try:
        driver.get("https://onlinetool.app/ext/m3u8_extractor")
        time.sleep(5)
        input_field = driver.find_element(By.NAME, "url")
        input_field.clear()
        input_field.send_keys(chaturbate_link)

        run_button = driver.find_element(By.XPATH, '//button[span[text()="Run"]]')
        run_button.click()
        time.sleep(15)
        logging.info("Esperando que se procesen los enlaces...")

        # Verificaci√≥n de los enlaces m3u8
        m3u8_links = driver.find_elements(By.XPATH, '//pre/a')
        logging.info(f"Enlaces encontrados: {len(m3u8_links)}")
        if m3u8_links:
            return m3u8_links[-1].get_attribute('href')
        else:
            logging.warning("No se encontraron enlaces m3u8.")
            return None
    except Exception as e:
        logging.error(f"Error al extraer el enlace: {e}")
        return None

# Subir y eliminar archivos mp4
async def upload_and_delete_mp4_files(user_id):
    try:
        files = [f for f in os.listdir(DOWNLOAD_PATH) if f.endswith('.mp4')]
        
        for file in files:
            file_path = os.path.join(DOWNLOAD_PATH, file)
            command = ["rclone", "copy", file_path, GDRIVE_PATH]
            
            # Cambiamos subprocess.run por asyncio.create_subprocess_exec
            process = await asyncio.create_subprocess_exec(
                *command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                logging.info(f"Subida exitosa: {file}")

                # Crear enlace compartido
                share_command = ["rclone", "link", GDRIVE_PATH + file]
                share_process = await asyncio.create_subprocess_exec(
                    *share_command,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                share_stdout, share_stderr = await share_process.communicate()
                
                if share_process.returncode == 0:
                    shared_link = share_stdout.strip().decode('utf-8')
                    await bot.send_message(int(user_id), f"‚úÖ Video subido: {file}\nüîó Enlace: {shared_link}")
                else:
                    logging.error(f"Error al crear enlace compartido para {file}: {share_stderr.decode('utf-8')}")
                    await bot.send_message(int(user_id), f"‚ùå Error al crear enlace compartido para: {file}")
            else:
                logging.error(f"Error al subir {file}: {stderr.decode('utf-8')}")
                await bot.send_message(int(user_id), f"‚ùå Error al subir el archivo: {file}")  # Notificar al usuario
                continue  # Saltar la eliminaci√≥n del archivo si la subida fall√≥
            
            # Solo eliminar el archivo si la subida fue exitosa
            try:
                os.remove(file_path)
                logging.info(f"Archivo eliminado: {file}")
            except Exception as e:
                logging.error(f"Error al eliminar el archivo {file}: {e}")
                await bot.send_message(int(user_id), f"‚ùå Error al eliminar el archivo: {file}")

    except Exception as e:
        logging.error(f"Error en la funci√≥n upload_and_delete_mp4_files: {e}")
        await bot.send_message(int(user_id), f"‚ùå Error en el proceso de subida y eliminaci√≥n: {e}")

# Descargar con yt-dlp (as√≠ncrono) con t√≠tulo modificado
async def download_with_yt_dlp(m3u8_url, user_id, modelo, original_link):
    # Formatear la fecha y hora actual
    fecha_hora = time.strftime("%Y%m%d_%H%M%S")
    output_file_path = os.path.join(DOWNLOAD_PATH, f"{modelo}_{fecha_hora}.mp4")
    command_yt_dlp = ['yt-dlp', '-f', 'best', m3u8_url, '-o', output_file_path]
    try:
        logging.info(f"Iniciando descarga con yt-dlp: {m3u8_url} para {modelo}")
        await bot.send_message(int(user_id), f"üî¥ Iniciando grabaci√≥n para el enlace guardado: {original_link}")

        # Agregar a grabaciones
        grabaciones[modelo] = {
        'inicio': time.time(),
        'file_path': output_file_path,
        'user_id': user_id,
    }

        process = await asyncio.create_subprocess_exec(
            *command_yt_dlp,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        if process.returncode == 0:
            logging.info(f"Descarga completa para {modelo}.")
            await bot.send_message(int(user_id), f"‚úÖ Grabaci√≥n completa para {modelo}.")
            await upload_and_delete_mp4_files(user_id)
        else:
            stderr = stderr.decode('utf-8')
            logging.error(f"Error al descargar para {modelo}: {stderr}")
            await bot.send_message(int(user_id), f"‚ùå Error al descargar para {modelo}: {stderr}")
    except Exception as e:
        logging.error(f"Error durante la descarga para {modelo}: {e}")
        await bot.send_message(int(user_id), f"‚ùå Error durante la descarga para {modelo}: {e}")
    finally:
        grabaciones.pop(modelo, None)

# Funci√≥n para obtener la informaci√≥n de la modelo
async def obtener_informacion_modelo(modelo, user_id):
    info = grabaciones.get(modelo)
    if not info:
        return f"{modelo} est√° üî¥ offline.", False

    estado = "üü¢ online"
    tiempo_grabacion = time.time() - info['inicio']
    
    # Buscar el archivo de la grabaci√≥n en curso con extensi√≥n .mp4.part
    archivo_en_grabacion = glob.glob(f"{info['file_path']}.part")
    
    # Inicializar el tama√±o del archivo a 0 MB
    tamano_MB = 0

    try:
        if archivo_en_grabacion:
            # Si el archivo .part existe, obtener su tama√±o
            tamano_bytes = os.path.getsize(archivo_en_grabacion[0])
            tamano_MB = tamano_bytes / (1024 ** 2)
        else:
            # Si no existe el archivo .part, verificar si existe el archivo final
            if os.path.exists(info['file_path']):
                tamano_bytes = os.path.getsize(info['file_path'])
                tamano_MB = tamano_bytes / (1024 ** 2)
            else:
                logging.error(f"Archivo no encontrado: {info['file_path']}.part o {info['file_path']}")
                return f"{modelo} est√° online, pero el tama√±o del archivo a√∫n no est√° disponible.", True
    except OSError as e:
        logging.error(f"Error al obtener el tama√±o del archivo para {modelo}: {e}")

    mensaje = (
        f"Modelo: {modelo}\n"
        f"Estado: {estado}\n"
        f"Tiempo de grabaci√≥n: {int(tiempo_grabacion // 60)} min\n"
        f"Tama√±o del video: {tamano_MB:.2f} MB"
    )
    
    return mensaje, True

# Funci√≥n para enviar el mensaje con el bot√≥n inline
@bot.on(events.NewMessage(pattern='/check_modelo'))
async def check_modelo(event):
    if len(event.raw_text.split()) < 2:
        await event.respond("Por favor, proporciona el nombre de la modelo despu√©s del comando.")
        return

    nombre_modelo = event.raw_text.split()[1]
    
    # Crear el bot√≥n inline para mostrar el estado de la modelo
    buttons = [
        [Button.inline(f"Estado de {nombre_modelo}", data=f"alerta_modelo:{nombre_modelo}")]
    ]
    await event.respond("Haz clic en el bot√≥n para ver el estado de la modelo:", buttons=buttons)

# Funci√≥n que recibe el callback del bot√≥n y simula una alerta
@bot.on(events.CallbackQuery(data=lambda data: data.startswith(b"alerta_modelo")))
async def callback_alert(event):
    # Extrae el nombre de la modelo desde el callback data
    modelo_url = event.data.decode().split(':')[1]
    modelo = modelo_url.split('/')[-1]  # Extrae el nombre de la modelo al final del enlace

    # Obtener el estado actual de la modelo
    mensaje_alerta, online = await obtener_informacion_modelo(modelo, event.sender_id)

    # Enviar el mensaje como una alerta emergente
    await event.answer(mensaje_alerta, alert=True)
    
# Verificaci√≥n y extracci√≥n peri√≥dica de enlaces m3u8 modificada para incluir el enlace original
async def verificar_enlaces():
    while True:
        links = load_links()
        if not links:
            logging.warning("No se cargaron enlaces guardados.")
            await asyncio.sleep(60)
            continue

        tasks = []
        processed_links = {}

        for user_id_str, user_links in links.items():
            if not user_id_str or user_id_str == 'None':
                logging.error(f"user_id_str inv√°lido: '{user_id_str}'. Verifica el origen de los enlaces guardados.")
                continue

            try:
                user_id = int(user_id_str)
            except ValueError as e:
                logging.error(f"Error de conversi√≥n a int para user_id_str '{user_id_str}': {e}")
                continue

            for link in user_links:
                if link not in processed_links:
                    m3u8_link = extract_last_m3u8_link(link)
                    if m3u8_link:
                        modelo = link.rstrip('/').split('/')[-1]
                        task = asyncio.create_task(download_with_yt_dlp(m3u8_link, user_id, modelo, link))
                        tasks.append(task)
                        processed_links[link] = task
                    else:
                        modelo = link.rstrip('/').split('/')[-1]
                        if modelo in grabaciones:
                            await alerta_emergente(modelo, 'offline', user_id)
                            grabaciones.pop(modelo, None)
                        logging.warning(f"No se pudo obtener un enlace m3u8 v√°lido para el enlace: {link}")

        if tasks:
            await asyncio.gather(*tasks)

        logging.info("Verificaci√≥n de enlaces completada. Esperando 60 segundos para la pr√≥xima verificaci√≥n.")
        await asyncio.sleep(60)

# Funci√≥n para enviar alertas emergentes
async def alerta_emergente(modelo, estado, user_id):
    if estado == 'online':
        info = grabaciones.get(modelo)
        if not info:
            mensaje_alerta = f"{modelo} est√° üü¢ online."
        else:
            tiempo_grabacion = time.time() - info['start_time']
            try:
                tamano_bytes = os.path.getsize(info['file_path'])
                tamano_MB = tamano_bytes / (1024 ** 2)
            except OSError as e:
                tamano_MB = 0
                logging.error(f"Error al obtener el tama√±o del archivo para {modelo}: {e}")

            # Formatear el tiempo de grabaci√≥n
            horas, resto = divmod(int(tiempo_grabacion), 3600)
            minutos, segundos = divmod(resto, 60)
            tiempo_formateado = f"{horas}h {minutos}m {segundos}s"

            mensaje_alerta = (
                f"{modelo} est√° üü¢ online.\n"
                f"En grabaci√≥n: {tiempo_formateado}\n"
                f"Tama√±o del video: {tamano_MB:.2f} MB"
            )
    else:
        mensaje_alerta = f"{modelo} est√° üî¥ offline."

    # Mostrar la alerta emergente
    await bot.send_message(int(user_id), mensaje_alerta)

# Define si el mensaje es un comando y si el bot ha sido mencionado
async def is_bot_mentioned(event):
    return event.is_private or event.message.mentioned

# Comando de inicio de monitoreo y grabaci√≥n
@bot.on(events.NewMessage(pattern='/grabar'))
async def handle_grabar(event):
    if await is_bot_mentioned(event) and event.sender_id in AUTHORIZED_USERS:
        await event.respond(
            "üî¥ <b>Inicia monitoreo y grabaci√≥n autom√°tica de una transmisi√≥n</b> üî¥\n\n"
            "Por favor, env√≠a la URL de la transmisi√≥n para comenzar.",
            parse_mode='html'
        )
        is_recording[event.sender_id] = True
        
    else:
        await event.respond("‚ùó No tienes permiso para usar este comando.")

# Comando para guardar enlaces
@bot.on(events.NewMessage)
async def save_link(event):
    # Ignorar mensajes que no sean comandos ni mencionen al bot
    if not await is_bot_mentioned(event) and not event.text.startswith('/'):
        return
    
    # Ignorar comandos que comienzan con '/' pero no son el comando actual
    if event.text.startswith('/') and event.text.split()[0] not in ['/grabar', '/start', '/mis_enlaces', '/eliminar_enlace', '/status']:
        return
    
    # Procesar solo si el usuario est√° autorizado
    if event.sender_id in AUTHORIZED_USERS:
        if is_valid_url(event.text):
            add_link(event.sender_id, event.text)
            await event.respond("‚úÖ Enlace guardado para grabaci√≥n.")
        else:
            # No respondas nada si la URL es inv√°lida
            return
    else:
        await event.respond("‚ùó No tienes permiso para guardar enlaces.")

# Comando para mostrar enlaces guardados
@bot.on(events.NewMessage(pattern='/mis_enlaces'))
async def show_links(event):
    if await is_bot_mentioned(event):
        user_id = str(event.sender_id)
        links = load_links().get(user_id, [])
        if links:
            await event.respond("üìå <b>Enlaces guardados:</b>\n" + "\n".join(links), parse_mode='html')
        else:
            await event.respond("No tienes enlaces guardados.")

# Comando para eliminar un enlace espec√≠fico
@bot.on(events.NewMessage(pattern='/eliminar_enlace'))
async def delete_link(event):
    user_id = str(event.sender_id)
    link = event.text.split(maxsplit=1)[1] if len(event.text.split()) > 1 else None
    if link and user_id in load_links() and link in load_links()[user_id]:
        remove_link(user_id, link)
        await event.respond(f"‚úÖ Enlace eliminado: {link}")
    else:
        await event.respond("‚ùó Enlace no encontrado o comando incorrecto. Usa /eliminar_enlace <enlace>.")

# Comando para mostrar el estado del bot
@bot.on(events.NewMessage(pattern='/status'))
async def show_status(event):
    await event.respond("‚úÖ El bot est√° en funcionamiento y listo para grabar.")

@bot.on(events.NewMessage(pattern='/estado_grabacion'))
async def check_recording_status(event):
    if event.sender_id in is_recording:
        status = "en modo grabaci√≥n" if is_recording[event.sender_id] else "no en modo grabaci√≥n"
        await event.respond(f"üìπ Actualmente est√°s {status}.")
    else:
        await event.respond("‚ùó No tienes un estado de grabaci√≥n establecido.")

# Comando para resetear enlaces
@bot.on(events.NewMessage(pattern='/reset_links'))
async def reset_links(event):
    user_id = str(event.sender_id)
    if user_id == "1170684259":  # Solo el admin puede usar este comando
        os.remove(LINKS_FILE)
        await event.respond("‚úÖ Enlaces reseteados exitosamente.")
    else:
        await event.respond("‚ùó No tienes permiso para usar este comando.")

# Ignorar mensajes no v√°lidos
@bot.on(events.NewMessage)
async def ignore_invalid_commands(event):
    # No responder a mensajes que no coincidan con los comandos registrados
    pass

@bot.on(events.NewMessage)
async def process_url(event):
    if event.text.startswith('/'):
        return
    
    if event.text and is_valid_url(event.text):
        add_link(str(event.sender_id), event.text)
        await event.respond(f"üåê URL guardada: {event.text}")

        await event.respond(
            "‚ö†Ô∏è <b>¬°URL guardada!</b>\n\n"
            "Se ha guardado la URL correctamente. Ahora puedes comenzar la grabaci√≥n.",
            parse_mode='html'
        )
    else:
        await event.respond("‚ùó Por favor, env√≠a una URL v√°lida de transmisi√≥n.")

# Bienvenida
@bot.on(events.NewMessage(pattern='/start'))
async def send_welcome(event):
    await event.respond(
        "üëã <b>¬°Bienvenido al Bot de Grabaci√≥n!</b>\n\n"
        "Puedes iniciar una grabaci√≥n enviando una URL v√°lida.\n"
        "Comandos:\n"
        "‚Ä¢ <b>/grabar</b> - Inicia monitoreo y grabaci√≥n autom√°tica de una transmisi√≥n.\n"
        "‚Ä¢ <b>/mis_enlaces</b> - Muestra tus enlaces guardados.\n"
        "‚Ä¢ <b>/eliminar_enlace</b> - Elimina un enlace guardado.\n"
        "‚Ä¢ <b>/status</b> - Muestra el estado del bot.\n"
        "‚Ä¢ <b>/check_modelo</b> <nombre_modelo> - Verifica el estado de la modelo (online u offline)\n",
        parse_mode='html'
    )

if __name__ == '__main__':
    logging.info("Iniciando el bot de Telegram")
    
    bot.loop.create_task(verificar_enlaces())  # Lanza la verificaci√≥n en paralelo
    bot.run_until_disconnected()
    driver.quit()
